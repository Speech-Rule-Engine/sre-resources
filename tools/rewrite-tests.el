(defun rewrite-mml-json-test ()
  (interactive)
  (search-forward "\"tests\": {")
  (forward-line 1)
  (catch 'search-failed
    (while (search-forward "\": {" nil t)
      (beginning-of-line)
      (let ((beg (point)))
        (search-forward "expected")
        (beginning-of-line)
        (kill-ring-save beg (point))
        (forward-line 1)
        (search-forward "expected")
        (beginning-of-line)
        (insert "},\n")
        (yank)
        (forward-line 1)
        (search-forward "expected")
        (beginning-of-line)
        (insert "},\n")
        (yank)
        ))
    (beginning-of-buffer)
    (while (search-forward "\"test\": " nil t)
      (search-forward "preference\": \"")
      (let ((beg (point)))
        (search-forward "\",")
        (backward-char 2)
        (kill-ring-save beg (point))
        (search-backward ": {")
        (backward-char 1)
        (insert "_")
        (yank)
        (search-forward "\"test\": ")
        (forward-line 1)
        ))
    )
  (beginning-of-buffer)
  )


(defun rewrite-to-use-mml ()
  (interactive)
  (catch 'search-failed
    (while (search-forward "('<" nil t)
      (backward-char 2)
      (let ((beg (point)))
        (search-forward "',")
        (backward-char 1)
        (kill-ring-save beg (point))
        (kill-region beg (point))
        (insert "mml")
        (beginning-of-line)
        (open-line 1)
        (indent-for-tab-command)
        (insert "mml = ")
        (yank)
        (end-of-line)
        (insert ";")
        )))
  (beginning-of-buffer)
  (query-replace "\{\n  mml" "\{\n  var mml" t)
  )
